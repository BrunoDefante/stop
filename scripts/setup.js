var shell = require('shelljs');

// Run migrations
function runMigrations(){
  return new Promise((resolve, reject)=> {
    shell.exec("find 'database/migrations'", {silent:true}, (code, stdout, stderr) => {
      if (!stderr) {
        shell.echo('‚áí Rodando as migrations...');
        shell.exec('adonis migration:run');
        shell.echo('‚Ü≥ Migrations rodadas ‚úì\n');
        resolve();
      } else {
        reject('‚áí Aplica√ß√£o n√£o possui migrations.\n');
      }
    });
  });
}

// Run DB seeds
function runDBSeeds(){
  return new Promise((resolve, reject)=> {
    shell.exec("find 'database/seeds'", {silent:true}, (code, stdout, stderr) => {
      if (!stderr) {
        shell.echo('‚áí Rodando DB Seeds...');
        shell.exec('adonis seed');
        shell.echo('‚Ü≥ Seeds rodadas ‚úì\n');
        resolve();  
      } else {
        reject('‚áí Aplica√ß√£o n√£o possui seeds.\n');
      }
    });
  })
}

// Create .env file
shell.echo('‚áí Criando .env file...');
  if (shell.find('.env.example')) {
    shell.cp('.env.example', '.env');
    shell.echo('‚Ü≥ .env file criado com sucesso! ‚úì\n');
    
    runMigrations()
      .then(res => runDBSeeds())
      .then(res => shell.exec("echo 'O setup terminou. Divirta-se! üòâ'"))
      .catch(rej => shell.echo(rej))
      .finally(() => shell.echo("FIM"));
  } else {
    shell.echo('Erro: .env.example n√£o existe! N√£o foi poss√≠vel criar .env');
  }